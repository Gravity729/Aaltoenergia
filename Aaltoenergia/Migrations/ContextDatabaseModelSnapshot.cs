// <auto-generated />
using System;
using Aaltoenergia.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aaltoenergia.Migrations
{
    [DbContext(typeof(ContextDatabase))]
    partial class ContextDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Aaltoenergia.Model.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"), 1L, 1);

                    b.Property<DateTime>("BDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int");

                    b.Property<int>("PassportSeries")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("PersonalSubscriptionID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("char(11)");

                    b.HasKey("ClientID");

                    b.ToTable("client");
                });

            modelBuilder.Entity("Aaltoenergia.Model.ClientWorkout", b =>
                {
                    b.Property<int>("ClientWorkoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientWorkoutID"), 1L, 1);

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutID")
                        .HasColumnType("int");

                    b.HasKey("ClientWorkoutID");

                    b.HasIndex("ClientID");

                    b.HasIndex("WorkoutID");

                    b.ToTable("сlientWorkout");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonalSubscriptionID")
                        .HasColumnType("int");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeOfPayment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentID");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("Aaltoenergia.Model.PersonalSubscription", b =>
                {
                    b.Property<int>("PersonalSubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalSubscriptionID"), 1L, 1);

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionID")
                        .HasColumnType("int");

                    b.HasKey("PersonalSubscriptionID");

                    b.HasIndex("ClientID")
                        .IsUnique();

                    b.HasIndex("PaymentID")
                        .IsUnique();

                    b.HasIndex("SubscriptionID");

                    b.ToTable("personalSubscription");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Subscription", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionID"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubscriptionTypeID")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("SubscriptionTypeID");

                    b.ToTable("subscription");
                });

            modelBuilder.Entity("Aaltoenergia.Model.SubscriptionType", b =>
                {
                    b.Property<int>("SubscriptionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionTypeID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubscriptionTypeID");

                    b.ToTable("subscriptionType");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Trainer", b =>
                {
                    b.Property<int>("TrainerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerID"), 1L, 1);

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("BDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int");

                    b.Property<int>("PassportSeries")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("char(11)");

                    b.HasKey("TrainerID");

                    b.ToTable("trainer");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Visiting", b =>
                {
                    b.Property<int>("VisitingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitingID"), 1L, 1);

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitingID");

                    b.HasIndex("ClientID");

                    b.ToTable("visiting");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Workout", b =>
                {
                    b.Property<int>("WorkoutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutID"), 1L, 1);

                    b.Property<string>("DayOfTheWeek")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationOfTheEvent")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerID")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutTypeID")
                        .HasColumnType("int");

                    b.HasKey("WorkoutID");

                    b.HasIndex("TrainerID");

                    b.HasIndex("WorkoutTypeID");

                    b.ToTable("workout");
                });

            modelBuilder.Entity("Aaltoenergia.Model.WorkoutType", b =>
                {
                    b.Property<int>("WorkoutTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutTypeID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WorkoutTypeID");

                    b.ToTable("workoutType");
                });

            modelBuilder.Entity("Aaltoenergia.Model.ClientWorkout", b =>
                {
                    b.HasOne("Aaltoenergia.Model.Client", "Client")
                        .WithMany("ClientWorkout")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aaltoenergia.Model.Workout", "Workout")
                        .WithMany("ClientWorkout")
                        .HasForeignKey("WorkoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Aaltoenergia.Model.PersonalSubscription", b =>
                {
                    b.HasOne("Aaltoenergia.Model.Client", "Client")
                        .WithOne("PersonalSubscription")
                        .HasForeignKey("Aaltoenergia.Model.PersonalSubscription", "ClientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aaltoenergia.Model.Payment", "Payment")
                        .WithOne("PersonalSubscription")
                        .HasForeignKey("Aaltoenergia.Model.PersonalSubscription", "PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aaltoenergia.Model.Subscription", "Subscription")
                        .WithMany("PersonalSubscription")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Payment");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Subscription", b =>
                {
                    b.HasOne("Aaltoenergia.Model.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscription")
                        .HasForeignKey("SubscriptionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Visiting", b =>
                {
                    b.HasOne("Aaltoenergia.Model.Client", "Client")
                        .WithMany("Visiting")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Workout", b =>
                {
                    b.HasOne("Aaltoenergia.Model.Trainer", "Trainer")
                        .WithMany("Workout")
                        .HasForeignKey("TrainerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aaltoenergia.Model.WorkoutType", "WorkoutType")
                        .WithMany("Workout")
                        .HasForeignKey("WorkoutTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("WorkoutType");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Client", b =>
                {
                    b.Navigation("ClientWorkout");

                    b.Navigation("PersonalSubscription")
                        .IsRequired();

                    b.Navigation("Visiting");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Payment", b =>
                {
                    b.Navigation("PersonalSubscription")
                        .IsRequired();
                });

            modelBuilder.Entity("Aaltoenergia.Model.Subscription", b =>
                {
                    b.Navigation("PersonalSubscription");
                });

            modelBuilder.Entity("Aaltoenergia.Model.SubscriptionType", b =>
                {
                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Trainer", b =>
                {
                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Aaltoenergia.Model.Workout", b =>
                {
                    b.Navigation("ClientWorkout");
                });

            modelBuilder.Entity("Aaltoenergia.Model.WorkoutType", b =>
                {
                    b.Navigation("Workout");
                });
#pragma warning restore 612, 618
        }
    }
}
